// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"
	"time"

	"frank/app/dto"
)

const countScheduledJobs = `-- name: CountScheduledJobs :one
SELECT COUNT(*) FROM scheduled_jobs
`

// CountScheduledJobs
//
//	SELECT COUNT(*) FROM scheduled_jobs
func (q *Queries) CountScheduledJobs(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countScheduledJobs)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createContextEntry = `-- name: CreateContextEntry :one
INSERT INTO context_entries (created, tags, text)
VALUES ($1, $2, $3) RETURNING id
`

type CreateContextEntryParams struct {
	Created time.Time
	Tags    []string
	Text    string
}

// CreateContextEntry
//
//	INSERT INTO context_entries (created, tags, text)
//	VALUES ($1, $2, $3) RETURNING id
func (q *Queries) CreateContextEntry(ctx context.Context, arg CreateContextEntryParams) (int64, error) {
	row := q.db.QueryRow(ctx, createContextEntry, arg.Created, arg.Tags, arg.Text)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createMigration = `-- name: CreateMigration :one
INSERT INTO migration (id, applied)
VALUES ($1, $2) RETURNING id
`

type CreateMigrationParams struct {
	ID      string
	Applied time.Time
}

// CreateMigration
//
//	INSERT INTO migration (id, applied)
//	VALUES ($1, $2) RETURNING id
func (q *Queries) CreateMigration(ctx context.Context, arg CreateMigrationParams) (string, error) {
	row := q.db.QueryRow(ctx, createMigration, arg.ID, arg.Applied)
	var id string
	err := row.Scan(&id)
	return id, err
}

const createScheduledJob = `-- name: CreateScheduledJob :one
INSERT INTO scheduled_jobs (data)
VALUES ($1)
    RETURNING id
`

// CreateScheduledJob
//
//	INSERT INTO scheduled_jobs (data)
//	VALUES ($1)
//	    RETURNING id
func (q *Queries) CreateScheduledJob(ctx context.Context, data dto.ScheduledJobData) (int64, error) {
	row := q.db.QueryRow(ctx, createScheduledJob, data)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteContextEntry = `-- name: DeleteContextEntry :exec
DELETE
FROM context_entries
WHERE id = $1
`

// DeleteContextEntry
//
//	DELETE
//	FROM context_entries
//	WHERE id = $1
func (q *Queries) DeleteContextEntry(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteContextEntry, id)
	return err
}

const deleteScheduledJob = `-- name: DeleteScheduledJob :exec
DELETE FROM scheduled_jobs
WHERE id = $1
`

// DeleteScheduledJob
//
//	DELETE FROM scheduled_jobs
//	WHERE id = $1
func (q *Queries) DeleteScheduledJob(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteScheduledJob, id)
	return err
}

const getContextEntry = `-- name: GetContextEntry :one
SELECT id, created, tags, text
FROM context_entries
WHERE id = $1
`

// GetContextEntry
//
//	SELECT id, created, tags, text
//	FROM context_entries
//	WHERE id = $1
func (q *Queries) GetContextEntry(ctx context.Context, id int64) (ContextEntry, error) {
	row := q.db.QueryRow(ctx, getContextEntry, id)
	var i ContextEntry
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Tags,
		&i.Text,
	)
	return i, err
}

const getMigrations = `-- name: GetMigrations :many
SELECT id, applied
FROM migration
ORDER BY id
`

// GetMigrations
//
//	SELECT id, applied
//	FROM migration
//	ORDER BY id
func (q *Queries) GetMigrations(ctx context.Context) ([]Migration, error) {
	rows, err := q.db.Query(ctx, getMigrations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Migration{}
	for rows.Next() {
		var i Migration
		if err := rows.Scan(&i.ID, &i.Applied); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getScheduledJob = `-- name: GetScheduledJob :one
SELECT id, data FROM scheduled_jobs
WHERE id = $1
`

// GetScheduledJob
//
//	SELECT id, data FROM scheduled_jobs
//	WHERE id = $1
func (q *Queries) GetScheduledJob(ctx context.Context, id int64) (ScheduledJob, error) {
	row := q.db.QueryRow(ctx, getScheduledJob, id)
	var i ScheduledJob
	err := row.Scan(&i.ID, &i.Data)
	return i, err
}

const listContextEntries = `-- name: ListContextEntries :many
SELECT id, created, tags, text
FROM context_entries
ORDER BY created DESC
`

// ListContextEntries
//
//	SELECT id, created, tags, text
//	FROM context_entries
//	ORDER BY created DESC
func (q *Queries) ListContextEntries(ctx context.Context) ([]ContextEntry, error) {
	rows, err := q.db.Query(ctx, listContextEntries)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ContextEntry{}
	for rows.Next() {
		var i ContextEntry
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Tags,
			&i.Text,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listContextEntriesByAnyTag = `-- name: ListContextEntriesByAnyTag :many
SELECT id, created, tags, text
FROM context_entries
WHERE tags && $1
ORDER BY created DESC
`

// ListContextEntriesByAnyTag
//
//	SELECT id, created, tags, text
//	FROM context_entries
//	WHERE tags && $1
//	ORDER BY created DESC
func (q *Queries) ListContextEntriesByAnyTag(ctx context.Context, tags []string) ([]ContextEntry, error) {
	rows, err := q.db.Query(ctx, listContextEntriesByAnyTag, tags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ContextEntry{}
	for rows.Next() {
		var i ContextEntry
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Tags,
			&i.Text,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listContextEntriesByTags = `-- name: ListContextEntriesByTags :many
SELECT id, created, tags, text
FROM context_entries
WHERE tags @> $1
ORDER BY created DESC
`

// ListContextEntriesByTags
//
//	SELECT id, created, tags, text
//	FROM context_entries
//	WHERE tags @> $1
//	ORDER BY created DESC
func (q *Queries) ListContextEntriesByTags(ctx context.Context, tags []string) ([]ContextEntry, error) {
	rows, err := q.db.Query(ctx, listContextEntriesByTags, tags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ContextEntry{}
	for rows.Next() {
		var i ContextEntry
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Tags,
			&i.Text,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listScheduledJobs = `-- name: ListScheduledJobs :many
SELECT id, data FROM scheduled_jobs
ORDER BY id
`

// ListScheduledJobs
//
//	SELECT id, data FROM scheduled_jobs
//	ORDER BY id
func (q *Queries) ListScheduledJobs(ctx context.Context) ([]ScheduledJob, error) {
	rows, err := q.db.Query(ctx, listScheduledJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ScheduledJob{}
	for rows.Next() {
		var i ScheduledJob
		if err := rows.Scan(&i.ID, &i.Data); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
